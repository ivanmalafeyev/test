/*import { useDynamicAdapt } from './modules/dynamicAdapt.js'
useDynamicAdapt()*/
import * as ivmalFunctions from "./modules/functions.js";
//import "swiper/css/bundle";
//const LOCATION = {center: [37.623082, 55.75254], zoom: 9};
window.map = null;

main();
async function main() {
  await ymaps3.ready;
  const {YMap, YMapDefaultSchemeLayer, YMapControls} = ymaps3;

  const {YMapZoomControl} = await ymaps3.import('@yandex/ymaps3-controls@0.0.1');

  map = new YMap(document.getElementById('_ymap'), {location: LOCATION}, [
	 new YMapDefaultSchemeLayer(),
	 new YMapControls({position: 'right'}, [new YMapZoomControl({})])
  ]);
}

ymaps3.ready.then(() => {
/*  manageMap.onclick = () => {
	 manageMap.innerHTML = !map ? 'Delete map' : 'Create map';
	 if (map) {
		map.destroy();
		map = null;
	 } else {
		main();
	 }
  };*/
});;
import { _slideUp } from "./modules/functions.js";
const errClassName = "_error";
const activeClassName = "_active";

const PLACEHOLDER_OPACITY = 0.5;
const inputs = document.querySelectorAll("._input");
if (inputs) {
  [].forEach.call(inputs, (e) => {
    const dv = e.getAttribute("data-value");
    let isPlaceholder = true;
    //e.isPlaceholder = isPlaceholder;
    if (dv) {
      e.style.color = `rgba(255, 255, 255, ${PLACEHOLDER_OPACITY})`;
      e.value = dv;
      e.addEventListener("focus", () => {
        if (isPlaceholder) {
          e.value = "";
          isPlaceholder = false;
          e.isPlaceholder = isPlaceholder;
          e.style.color = `rgba(255, 255, 255, 1)`;
        }
      });
      e.addEventListener("blur", () => {
        if (e.value === "") {
          e.value = dv;
          isPlaceholder = true;
          e.isPlaceholder = isPlaceholder;
          e.style.color = `rgba(255, 255, 255, ${PLACEHOLDER_OPACITY})`;
        }
      });
    }
  });
}
const form = document.getElementById("form");
if (form) {
  form.addEventListener("submit", formSend);
  async function formSend(e) {
    e.preventDefault();
    if (formValidate() === 0) {
      //
      let formData = new FormData(form);
      formData.append("image", formImage.files[0]);

      form.classList.add("_sending");
      let response = await fetch('sendmail.php', {
        method: 'POST',
        body: formData
      });
      if (response.ok) {
        let result = await response.json();
        alert(result.message);
        formPreview.innerHTML = "";
        form.reset();
        form.classList.remove("_sending");
      } else {
        alert("Ошибка передачи данных. " + response.status);
        form.classList.remove("_sending");
        console.log(response);
      }
    } else {
      alert("Заполните обязательные поля");
    }
  }
}

function formValidate() {
  let error = 0;
  const formReq = document.querySelectorAll("._req");
  [].forEach.call(formReq, (el) => {
    formRemoveError(el);
    if (el.getAttribute("type") === "email") {
      if (emailTest(el)) {
        formAddError(el);
        error++;
      }
    } else if (el.getAttribute("type") === "checkbox" && el.checked === false) {
      formAddError(el);
      error++;
    } else if (el.value === "" || el.isPlaceholder) {
      formAddError(el);
      error++;
      console.log(el.value + " + " + el.isPlaceholder);
    }
  });
  return error;
}

function formAddError(input) {
  input.parentElement.classList.add("_err");
  input.classList.add("_err");
}

function formRemoveError(input) {
  input.parentElement.classList.remove("_err");
  input.classList.remove("_err");
}

function emailTest(input) {
  return !/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,8})+$/.test(input.value);
}

function digi(str) {
  return str.toString().replace(/(\d)(?=(\d\d\d)+([^\d]|$))/g, "$1 ");
}

function digiAnimate(digiAnimate) {
  if (digiAnimate.length > 0) {
    [].forEach.call(digiAnimate, (el) => {
      const elTo = +el.innerHTML.replace(" ", "");
      if (!el.classList.contains("_done")) {
        // digiAnimateValue(el, 0, elTo, 1500);
      }
    });
  }
}

const quantityButtons = document.querySelectorAll(".quantity__button");
if (quantityButtons.length > 0) {
  [].forEach.call(quantityButtons, (qb) => {
    qb.addEventListener("click", (e) => {
      let value = parseInt(
        qb.closest(".quantity").querySelector("input").value
      );
      if (qb.classList.contains("quantity__button--plus")) {
        value++;
      } else {
        value--;
        if (value < 1) {
          value = 1;
        }
      }
      qb.closest(".quantity").querySelector("input").value = value;
    });
  });
}

const formImage = document.getElementById("formImage");
const formPreview = document.getElementById("formPreview");
formImage.addEventListener("change", () => {
  uploadFile(formImage.files[0]);
});

function uploadFile(file) {
  if (
    !["image/jpeg", "image/jpg", "image/png", "image/gif"].includes(file.type)
  ) {
    alert("Разрешены только изображения.");
    formImage.value = "";
    return;
  }
  if (file.size > 2 * 1024 * 1024) {
    alert("Файл должен быть менее 2 МБ.");
    return;
  }

  let reader = new FileReader();
  reader.onload = (e) => {
    formPreview.innerHTML = `<img src="${e.target.result}" alt="Фото">`;
  };
  reader.onerror = (e) => {
    alert("Ошибка чтения файла.");
  };
  reader.readAsDataURL(file);
}

// Select
const selects = document.getElementsByTagName("select+++++++++++");
if (selects.length > 0) {
  selectsInit();
}

function selectsInit() {
  [].forEach.call(selects, (select) => {
    selectInit(select);
  });

  document.addEventListener("click", (e) => {
    selectsClose(e);
  });
  document.addEventListener("keydown", (e) => {
    if (e.which == 27) {
      selectsClose(e);
    }
  });
}

function selectsClose(e) {
  const selects = document.querySelectorAll("._select");
  if (!e.target.closest("._select")) {
    [].forEach.call(selects, (select) => {
      const selectBodyOptions = select.querySelector("._select__options");
      select.classList.remove(activeClassName);
      _slideUp(selectBodyOptions, null, 100);
    });
  }
}

function selectInit(select) {
  const selectParent = select.parentElement;
  const selectModifier = select.getAttribute("class");
  const selectSelectedOption = select.querySelector("option:checked");
  select.setAttribute("data-default", selectSelectedOption.value);
  select.style.display = "none";

  selectParent.insertAdjacentHTML(
    "beforeend",
    "<div class='_select _select_" + selectModifier + "'></div>"
  );

  const newSelect = selectParent.querySelector("._select");
  newSelect.append(select);
  selectItem(select);
}

function selectItem(select) {
  const selectParent = select.parentElement;
  const selectItems = selectParent.querySelector("._select__item");
  const selectOptions = select.querySelectorAll("option");
  const selectSelectedOption = select.querySelector("option:checked");
  const selectSelectedText = selectSelectedOption.text;
  const selectType = select.getAttribute("data_type");

  if (selectItems) {
    selectItems.remove();
  }

  let selectTypeContent = "";
  if (selectType == "input") {
    selectTypeContent =
      "<div class='_select__value icon-select-arrow'><input autocomplete='off' type='text' name='form[]' value='" +
      selectSelectedText +
      "'/></div>";
  } else {
    selectTypeContent =
      "<div class='_select__value icon-select-arrow'><span>" +
      selectSelectedText +
      "</span></div>";
  }

  selectParent.insertAdjacentHTML(
    "beforeend",
    "<div class='_select__item'>" +
      "<div class='_select__title'>" +
      selectTypeContent +
      "</div>" +
      "<div class='_select__options'>" +
      selectGetOptions(selectOptions) +
      "</div></div></div>"
  );

  selectActions(select, selectParent);
}

function selectActions(original, select) {
  const selectItem = select.querySelector("._select__item");
  const selectBodyOptions = select.querySelector("._select__options");
  const selectOptions = select.querySelectorAll("._select__option");
  const selectType = original.getAttribute("data-type");
  const selectInput = select.querySelector("._select__input");

  selectItem.addEventListener("click", () => {
    const selects = document.querySelectorAll("._select");
    [].forEach.call(selects, (select) => {
      const selectBodyOptions = select.querySelector("._select__options");
      if (select != selectItem.closest("._select")) {
        select.classList.remove(activeClassName);
        _slideUp(selectBodyOptions, null, 100);
      }
    });
    _slideToggle(selectBodyOptions, null, 100);
    select.classList.toggle(activeClassName);
  });

  [].forEach.call(selectOptions, (selectOption) => {
    const selectOptionValue = selectOption.getAttribute("data-value");
    const selectOptionText = selectOption.innerHTML;

    if (selectType == "input") {
      selectInput.addEventListener("keyup", selectSearch);
    } else {
      if (selectOption.getAttribute("data-value") == original.value) {
        selectOption.style.display = "none";
      }
    }
    selectOption.addEventListener("click", () => {
      [].forEach.call(selectOptions, (el) => {
        el.style.display = "block";
      });
      if (selectType == "input") {
        selectInput.value = selectOptionText;
        original.value = selectOptionValue;
      } else {
        select.querySelector(".select__value").innerHTML =
          "<span>" + selectOptionText + "</span>";
        original.value = selectOptionValue;
        selectOption.style.display = "none";
      }
    });
  });
}

function selectGetOptions(selectOptions) {
  if (selectOptions) {
    let selectOptionsContent = "";
    [].forEach.call(selectOptions, (selectOption) => {
      const selectOptionValue = selectOption.value;
      if (selectOptionValue) {
        const selectOptionText = selectOption.text;
        selectOptionsContent =
          selectOptionsContent +
          "<div data-value='" +
          selectOptionValue +
          "' class='_select__option'>" +
          selectOptionText +
          "</div>";
      }
    });
    return selectOptionsContent;
  }
}

function selectSearch(e) {
  const selectBlock = e.target
    .closest("._select")
    .querySelector("._select__options");
  const selectOptions = e.target
    .closest("._select")
    .querySelectorAll("._select__option");
  const selectSearchText = e.target.value.toUpperCase();

  [].forEach.call(selectOptions, (selectOption) => {
    const selectTxtValue = selectOption.textContent || selectOption.innerText;
    if (selectTxtValue.toUpperCase().indexOf(selectSearchText) > -1) {
      selectOption.style.display = "";
    } else {
      selectOption.style.display = "none";
    }
  });
}

function selectsUpdateAll() {
  const selects = document.querySelectorAll("select");
  if (selects) {
    [].forEach.call(selects, (select) => {
      selectItem(select);
    });
  }
}
// Select end
;
import { _slideToggle } from "./modules/functions.js";

//Check mobile
const isMobile = {
  Android: () => {
    return !!navigator.userAgent.match(/Android/i);
  },
  BlackBerry: () => {
    return !!navigator.userAgent.match(/BlackBerry/i);
  },
  iOS: () => {
    return !!navigator.userAgent.match(/iPhone|iPad|iPod/i);
  },
  Opera: () => {
    return !!navigator.userAgent.match(/Opera Mini/i);
  },
  Windows: () => {
    return !!navigator.userAgent.match(/IEMobile/i);
  },
  any: () => {
    return (
      isMobile.Android() ||
      isMobile.BlackBerry() ||
      isMobile.iOS() ||
      isMobile.Opera() ||
      isMobile.Windows()
    );
  },
};

//Set touch mode or mouse mode
if (isMobile.any()) {
  async function showSubMenu(e) {
    await _slideToggle(e.target.nextElementSibling, e.target.previousElementSibling);
    if (!e.target.nextElementSibling.classList.contains("_open")) {
      e.target.nextElementSibling.classList.toggle("_open");
    }
    e.target.classList.toggle("_active");
  }
  document.body.classList.add("_touch");
  const arrows = document.querySelectorAll("._popup-arrow");
  if (arrows.length > 0) {
    [].forEach.call(arrows, (arr) => {
      arr.previousElementSibling.classList.add("_parent");
      _slideUp(arr.nextElementSibling, arr.previousElementSibling);
      arr.addEventListener("click", showSubMenu);
    });  
  }
} else {
  document.body.classList.add("_mouse");
}
;
const popupLinks = document.querySelectorAll("._popup-link");
const body = document.querySelector("body");
const lockPadding = document.querySelectorAll("._lock-padding");

let unlock = true;

const timeout = 800;

if (popupLinks.length > 0) {
  [].forEach.call(popupLinks, (pl) => {
    pl.addEventListener("click", (e) => {
      const popupName = pl.getAttribute("href").replace("#", "");
      const currentPopup = document.getElementById(popupName);
      popupOpen(currentPopup);
      e.preventDefault();
    });
  });
}

const popupCloseIcons = document.querySelectorAll("._popup-close");
if (popupCloseIcons.length > 0) {
  [].forEach.call(popupCloseIcons, (pci) => {
    pci.addEventListener("click", (e) => {
      popupClose(pci.closest("._popup"));
      e.preventDefault();
    });
  });
}

function popupOpen(currentPopup) {
  if (currentPopup && unlock) {
    const popupActive = document.querySelector("_popup._open-popup");
    if (popupActive) {
      popupClose(popupActive, false);
    } else {
      bodyLock();
    }
  }

  currentPopup.classList.add("_open-popup");
  currentPopup.addEventListener("click", (e) => {
    if (!e.target.closest("._popup-content")) {
      popupClose(e.target.closest("._popup"));
    }
  });
}

function popupClose(popupActive, doUnlock = true) {
  if (unlock) {
    popupActive.classList.remove("_open-popup");
    if (doUnlock) {
      bodyUnlock();
    }
  }
}

function bodyLock() {
  const lockPaddingValue =
    window.innerWidth - document.querySelector("._wrapper").offsetWidth + "px";
  if (lockPadding.length > 0) {
    [].forEach.call(lockPadding, (lp) => {
      lp.style.paddingRight = lockPaddingValue;
    });
  }
  body.style.paddingRight = lockPaddingValue;
  body.classList.add("_lock");

  unlock = false;
  setTimeout(() => {
    unlock = true;
  }, timeout);
}

function bodyUnlock() {
  setTimeout(() => {
    if (lockPadding.length > 0) {
      [].forEach.call(lockPadding, (lp) => {
        lp.style.paddingRight = "0px";
      });
    }
    body.style.paddingRight = "0px";
    body.classList.remove("_lock");
  }, timeout);

  unlock = false;
  setTimeout(() => {
    unlock = true;
  }, timeout);
}

document.addEventListener("keydown", (e) => {
	if (e.which === 27) {
		const popupActive = document.querySelector("._poppup.open-popup");
		popupClose(popupActive);
	}
});

(function () {
	if (!Element.prototype.closest) {
		Element.prototype.closest = function(css) {
			var node = this;
			while (node) {
				if (node.matches(css)) return node;
				else node = node.parentElement;
			}
			return null;
		};
	}
})();
(function () {
	if (!Element.prototype.matches) {
		Element.prototype.matches = Element.prototype.matchesSelector ||
			Element.prototype.webkitMatchesSelector ||
			Element.prototype.mozMatchesSelector ||
			Element.prototype.msMathesSelector;
	}
})();
;
const ratings = document.querySelectorAll(".rating");
if (ratings.length > 0) {
	initRatings();
}

function initRatings() {
	let ratingActive, ratingValue;
	[].forEach.call(ratings, (rating) => {
		initRating(rating);
	});

	function initRating(rating) {
		initRatingVars(rating);
		setRatingActiveWidth();

		if (rating.classList.contains("rating_set")) {
			setRating(rating);
		}
	}

	function initRatingVars(rating) {
		ratingActive = rating.querySelector(".rating__active");
		ratingValue = rating.querySelector(".rating__value");
	}

	function setRatingActiveWidth(index = ratingValue.innerHTML) {
		const ratingActiveWidth = index / 0.05;
		ratingActive.style.width = `${ratingActiveWidth}%`;
	}

	function setRating(rating) {
		const ratingItems = rating.querySelectorAll(".rating__item");
		[].forEach.call(ratingItems, (ri,ind) => {
			ri.addEventListener("mouseenter", (e) => {
				initRatingVars(rating);
				setRatingActiveWidth(ri.value);
			});
			ri.addEventListener("mouseleave", (e) => {
				setRatingActiveWidth();
			});
			ri.addEventListener("click", (e) => {
				initRatingVars(rating);
				if (rating.dataset.ajax) {
					setRatingValue(ri.value, rating);
				} else {
					ratingValue.innerHTML = ind + 1;
					setRatingActiveWidth();
				}
			});
		});
	}

	async function setRatingValue(value, rating) {
		if (!rating.classList.contains("rating-sending")) {
			rating.classList.add("rating-sending");
			let response = await fetch("files/rating.json", {
				method: "GET",

				//body: JSON.stringify({
				//	userRating: value,
				//}),
				//headers: {
				//	'content-type': 'application/json',
				//},
			});
			if (response.ok) {
				const result = await response.json();
				const newRating = result.newRating;
				ratingValue.innerHTML = newRating;
				setRatingActiveWidth();
			} else {
				alert("Ошибка передачи данных");
			}
			rating.classList.remove("rating-sending");
		}
	}
}

;
const lazyImages = document.querySelectorAll("img[data-src],source[data-srcset]");
const loadMapBlock = document.querySelector("._load-map");
const windowHeight = document.documentElement.clientHeight;
const loadMoreBlock = document.querySelector("._load-more");

let lazyImagesPositions = [];
if (lazyImages.length > 0) {
	[].forEach.call(lazyImages, (img) => {
		if (img.dataset.src || img.dataset.srcset) {
			lazyImagesPositions.push(img.getBoundingClientRect().top + pageYOffset);
			lazyScrollCheck();
		}
	});
}

window.addEventListener("scroll", lazyScroll);

function lazyScroll() {
	if (document.querySelectorAll("img[data-src],source[data-srcset]").length > 0) {
		lazyScrollCheck();
	}
	if (loadMapBlock && !loadMapBlock.classList.contains("_loaded")) {
		getMap();
	}
	if (loadMoreBlock && !loadMoreBlock.classList.contains("_loading")) {
		loadMore();
	}
}

function lazyScrollCheck() {
	let imgIndex = lazyImagesPositions.findIndex(
		item => pageYOffset > item - windowHeight
	);
	if (imgIndex >= 0) {
		if (lazyImages[imgIndex].dataset.src) {
			lazyImages[imgIndex].src = lazyImages[imgIndex].dataset.src;
			lazyImages[imgIndex].removeAttribute('data-src');
		} else if (lazyImages[imgIndex].dataset.srcset) {
			lazyImages[imgIndex].srcset = lazyImages[imgIndex].dataset.srcset;
			lazyImages[imgIndex].removeAttribute('data-srcset');
		}
		delete lazyImagesPositions[imgIndex];
	}
}

async function getMap() {
	const loadMapBlockPos = loadMapBlock.getBoundingClientRect().top + pageYOffset;
	if (pageYOffset > loadMapBlockPos - windowHeight) {
		//const loadMapURL = loadMapBlock.dataset.map;
		//if (loadMapURL) {
			/*loadMapBlock.insertAdjacentHTML(
				"beforeend",
				`<iframe src="${loadMapURL}" style="border:0;" allowfullscreen="" loading="lazy"></iframe>`
			);*/
			console.log("start");
			await loadMap();
			console.log("finish");
			loadMapBlock.classList.add("_loaded");
		//}
	}
}

const LOCATION = {center: [37.623082, 55.75254], zoom: 9};
window.map = null;

async function loadMap() {
	await ymaps3.ready;
	const {YMap, YMapDefaultSchemeLayer, YMapControls} = ymaps3;
 
	const {YMapZoomControl} = await ymaps3.import('@yandex/ymaps3-controls@0.0.1');
 
	map = new YMap(document.getElementById('_ymap'), {location: LOCATION}, [
	  new YMapDefaultSchemeLayer(),
	  new YMapControls({position: 'right'}, [new YMapZoomControl({})])
	]);
 } 

function loadMore() {
	const loadMoreBlockPos = loadMoreBlock.getBoundingClientRect().top + pageYOffset;
	const loadMoreBlockHeight = loadMoreBlock.offsetHeight;
	if (pageYOffset > loadMoreBlockPos + loadMoreBlockHeight - windowHeight) {
		getContent();
	}
}

async function getContent() {
	if (!loadMoreBlock.querySelector("._loading-icon")) {
		loadMoreBlock.insertAdjacentHTML(
			"beforeend",
			`<div class="_loading-icon"></div>`
		);
	}
	loadMoreBlock.classList.add("._loading");

	let response = await fetch("_more.html", {
		method: "GET",
	});

	if (response.ok) {
		let result = await response.text();
		loadMoreBlock.insertAdjacentHTML(
			"beforeend",
			result
		);
		loadMoreBlock.classList.remove("._loading");
		if (loadMoreBlock.querySelector("._loading-icon")) {
			loadMoreBlock.querySelector("._loading-icon").remove();
		}		
	} else {
		alert("Ошибка передачи данных");
	}
};
const spoilersArray = document.querySelectorAll("[data-spoilers]");
if (spoilersArray.length > 0) {
	const spoilersRegular = Array.from(spoilersArray).filter((item) => {
		return !item.dataset.spoilers.split(",")[0];
	});
	
	if (spoilersRegular.length > 0) {
		initSpoilers(spoilersRegular);
	}
	
	const spoilersMedia = Array.from(spoilersArray).filter((item) => {
		return item.dataset.spoilers.split(",")[0];
	});

	if (spoilersMedia.length > 0) {
		const breakpointsArray = [];
		[].forEach.call(spoilersMedia, (item) => {
			const params = item.dataset.spoilers;
			const breakpoint = {};
			const paramsArray = params.split(",");
			breakpoint.value = paramsArray[0];
			breakpoint.type = paramsArray[1] ? paramsArray[1].trim() : "max";
			breakpoint.item = item;
			breakpointsArray.push(breakpoint);
		});

		let mediaQueries = breakpointsArray.map((item) => {
			return "(" + item.type + "-width: " + item.value + "px)," + item.value + "," + item.type;
		});

		mediaQueries = mediaQueries.filter((item, index, self) => {
			return self.indexOf(item) === index;
		});

		[].forEach.call(mediaQueries, (breakpoint) => {
			const paramsArray = breakpoint.split(",");
			const mediaBreakpoint = paramsArray[1];
			const mediaType = paramsArray[2];
			const matchMedia = window.matchMedia(paramsArray[0]);

			const spoilersArray = breakpointsArray.filter((item) => {
				if (item.value === mediaBreakpoint && item.type === mediaType) {
					return true;
				}
			});

			matchMedia.addListener(() => {
				initSpoilers(spoilersArray, matchMedia);
			});

			initSpoilers(spoilersArray, matchMedia);
		});
	}

	function initSpoilers(spoilersArray, matchMedia = false) {
		[].forEach.call(spoilersArray, (spoilersBlock) => {
			spoilersBlock = matchMedia ? spoilersBlock.item : spoilersBlock;
			if (matchMedia.matches || !matchMedia) {
				spoilersBlock.classList.add("_init");
				initSpoilerBody(spoilersBlock);
				spoilersBlock.addEventListener("click", setSpoilerAction);
			} else {
				spoilersBlock.classList.remove("_init");
				initSpoilerBody(spoilersBlock, false);
				spoilersBlock.removeEventListener("click", setSpoilerAction);
			}
		});
	}

	function initSpoilerBody(spoilersBlock, hideSpoilerBody = true) {
		const spoilerTitles = spoilersBlock.querySelectorAll("[data-spoiler]");
		if (spoilerTitles.length > 0) {
			[].forEach.call(spoilerTitles, (sp) => {
				if (hideSpoilerBody) {
					sp.removeAttribute("tabindex");
					if (!sp.classList.contains("_active")) {
						sp.nextElementSibling.hidden = true;
					}
				} else {
					sp.setAttribute("tabindex", "-1")
					sp.nextElementSibling.hidden = false;
				}
			});
		}
	}

	function setSpoilerAction(e) {
		const el = e.target;
		if (el.hasAttribute("data-spoiler") || el.closest("[data-spoiler]")) {
			const spoilerTitle = el.hasAttribute("data-spoiler") ? el : el.closest("[data-spoiler]");
			const spoilersBlock = spoilerTitle.closest("[data-spoilers]");
			const accordeon = spoilersBlock.hasAttribute("data-accordeon") ? true : false;
			if (!spoilersBlock.querySelectorAll("._slide").length) {
				if (accordeon && !spoilerTitle.classList.contains("_active")) {
					hideSpoilersBody(spoilersBlock);
				}
				spoilerTitle.classList.toggle("_active");
				_slideToggle(spoilerTitle.nextElementSibling, spoilerTitle);
			}
			e.preventDefault();
		}
	}

	function hideSpoilersBody(spoilersBlock) {
		const spoilerActiveTitle = spoilersBlock.querySelector("[data-spoiler]._active");
		if (spoilerActiveTitle) {
			spoilerActiveTitle.classList.remove("_active");
			_slideUp(spoilerActiveTitle.nextElementSibling, spoilerActiveTitle);
		}
	}
};
import Swiper from "swiper/bundle";

const swiper = new Swiper(".block-slider__swiper", {
	navigation: {
		nextEl: '.swiper-button-next',
		prevEl: '.swiper-button-prev',
	},
	pagination: {
		el: '.swiper-pagination',
		clickable: true
	},
	scrollbar: {
		el: '.swiper-scrollbar',
		draggable: true,
	},
	//autoHeight: true,
	slidesPerView: 2.6,
	spaceBetween: 15,

	preloadImages: false,
	lazy: {
		loadOnTransitionStart: true,
		loadPrevNext: false,
		watchSlidesProgress: true,
		watchSlidesVisibility: true,
	}
});;

ivmalFunctions.isWebp();

const img = document.querySelectorAll("._ibg");
Array.prototype.forEach.call(img, (value) => {
  if (value.querySelector("img")) {
    value.style.backgroundImage =
      "url(" + value.querySelector("img").getAttribute("src") + ")";
  }
});

// Spoilers
/*const spoilers = document.querySelectorAll("._spoilers");
if (spoilers) {
  [].forEach.call(spoilers, (el) => {
    const spoilerItems = el.querySelectorAll("._spoiler");
    [].forEach.call(spoilerItems, (spoiler) => {
      const spoilerBody = spoiler.nextElementSibling;
      spoiler.addEventListener("click", (e) => {
        if (el.classList.contains("_accordeon")) {
          [].forEach.call(spoilerItems, (si) => {
            if (si.classList.contains("_active") && si != spoiler) {
              si.classList.remove("_active");
              ivmalFunctions._slideUp(si.nextElementSibling, si);
            }
          });
        }
        spoiler.classList.toggle("_active");
        ivmalFunctions._slideToggle(spoilerBody, spoiler);
      });
    });
  });
}*/

// Responsive mobile menu
const menuIcon = document.querySelector(".header-menu__icon");
const menu = document.querySelector(".header-menu");
const links = document.querySelectorAll(".header-menu__link");

function toggleClass(c) {
  menuIcon.classList.toggle(c);
  menu.classList.toggle(c);
  [].forEach.call(links, (lnk) => {
    lnk.classList.toggle("_active");
  });
  document.body.classList.toggle("_lock");
}

menuIcon.addEventListener("click", () => {
  function toggleClass(c) {
    menuIcon.classList.toggle(c);
    menu.classList.toggle(c);
    [].forEach.call(links, (lnk) => {
      lnk.classList.toggle("_active");
    });
    document.body.classList.toggle("_lock");
  }
  toggleClass("_active");

  function linkCB() {
    toggleClass("_active");
    [].forEach.call(links, (l) => {
      l.removeEventListener("click", linkCB);
    });
  }

  [].forEach.call(links, (l) => {
    l.addEventListener("click", linkCB);
  });
});

// Page smooth scrolling
const menuHeader = document.querySelector(".header");
// const links = document.querySelectorAll(".header-menu__link");

let scrolled = false;
const blocks = [];
let current = -1;

function getBlocks() {
  [].forEach.call(links, (l) => {
    blocks.push(
      document.querySelector("." + l.getAttribute("href").split("#")[1])
    );
  });
}
getBlocks();

window.addEventListener("scroll", () => {
  scrollUpdate();
});

scrollUpdate();

function scrollUpdate() {
  if (pageYOffset > 0) {
    scrolled = true;
    if (scrolled) {
      menuHeader.classList.add("_scrolled");
      // mainBlock.style.marginTop = `${menuHeader.offsetHeight}px`;
    }
  } else {
    scrolled = false;
    // mainBlock.style.marginTop = `0px`;
    menuHeader.classList.remove("_scrolled");
  }

  const boxes = [];
  if (blocks[0]) {
    Array.prototype.forEach.call(blocks, (b) => {
      boxes.push(Math.abs(b.getBoundingClientRect().top));
    });
    const min = Math.min(...boxes);
    const i = boxes.indexOf(min);
    if (i != current || min >= 500) {
      current = -1;
      Array.prototype.forEach.call(links, (l) => {
        l.classList.remove("_current");
      });
      if (min < 500) {
        current = i;
        links[i].classList.add("_current");
        // links[i + links.length / 2].classList.add("_current");
      }
    }
  }
}

//smooth scroll from first fullscreen to content
const gotos = document.querySelectorAll("._goto");
if (gotos) {
  [].forEach.call(gotos, (e) => {
    e.addEventListener("click", () => {
      if (menuIcon) {
        if (menuIcon.classList.contains("_active")) {
          toggleClass("_active");
        }
      }
      const link = e.getAttribute("href");
      if (link) {
        const box = document
          .querySelector("." + link.split("#")[1])
          .getBoundingClientRect();
        window.scrollTo({
          top: box.top + pageYOffset - menuHeader.offsetHeight,
          behavior: "smooth",
        });
        //e.preventDefault();
      }
    });
  });
}

